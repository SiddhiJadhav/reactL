{"version":3,"sources":["App.module.css","Person/Person.js","ErrorBoundary/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","red","bold","Red","person","props","react_default","a","createElement","className","onClick","click","name","age","children","onChange","changed","value","ErrorBoundary","state","hasError","errorMessage","componentDidCatch","error","info","_this","setState","this","Component","id","anotherState","showToggle","showContent","showT","deletePerson","indexPerson","persons","Object","toConsumableArray","splice","changeNameHandler","event","realId","findIndex","p","realPerson","objectSpread","target","changedPersons","console","log","_this2","rButton","map","index","src_ErrorBoundary_ErrorBoundary","key","Person_Person","bind","styles","classes","length","push","join","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bc33f46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3uWv7\",\"red\":\"App_red__308Dk\",\"bold\":\"App_bold__3BKar\",\"Red\":\"App_Red__wG5j6\"};","import React from 'react';\nimport './Person.css';  \n\nconst person = (props)=>{\n    return(\n        <div className=\"PersonStyle\">\n\n            <h2 onClick={props.click}>Hi My Name is {props.name}</h2>           \n            <h2>Age :--> {props.age} </h2>    \n            <h3>{props.children}</h3>\n            <input onChange={props.changed} value={props.name}/>\n        </div>\n    )\n}\n\nexport default person;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false,\n        errorMessage: ''\n    }\n\n    componentDidCatch = (error, info) => {\n        this.setState({hasError: true, errorMessage: error});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>{this.state.errorMessage}</h1>;\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport './App.css';\nimport styles from './App.module.css';\nimport Person from './Person/Person'\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary';\n\nclass App extends Component {\n\n  state={\n    person:[\n      {id:'1',name:\"Ruturaj\",age:26},\n      {id:'2',name:\"Rutu\",age:11},\n      {id:'3',name:\"raj\",age:22}\n    ],\n    anotherState:[\n\n    ],\n    showToggle:false\n\n  }\n  showContent=()=>{\n    let showT = this.state.showToggle;\n    this.setState({\n      showToggle:!showT\n    });\n\n  }\n  deletePerson = (indexPerson)=>{\n    const persons = [...this.state.person];\n    persons.splice(indexPerson,1);\n    this.setState({person:persons});\n  }\n\n  changeNameHandler=(event,id)=>{\n    // console.log(event.target.value);\n    const realId = this.state.person.findIndex(p=>{\n      return p.id===id\n    });\n    // console.log(realId);\n    const realPerson = {...this.state.person[realId]};\n    realPerson.name = event.target.value;\n\n    const changedPersons = [...this.state.person];\n    changedPersons[realId]=realPerson;\n    console.log(changedPersons);\n\n    this.setState({person:changedPersons});\n  }\n\n\n  render() {\n\n    let persons=null;\n    let rButton =''\n    if(this.state.showToggle){\n      persons = (\n        <div>\n\n        {\n          this.state.person.map((person,index)=>{\n            return (\n            <ErrorBoundary key={person.id}>\n            <Person \n            name={person.name} \n            age={person.age} \n            click={this.deletePerson.bind(this,index)}\n            changed={(event)=>this.changeNameHandler(event,person.id)}/>\n          </ErrorBoundary>  \n          )})\n        }\n        </div>\n      );\n      // style.backgroundColor=\"red\";\n      rButton=styles.Red;\n\n    }\n\n    let classes = [];\n    if(this.state.person.length<=2){\n      classes.push(styles.red);\n    }\n\n    if(this.state.person.length<=1){\n      classes.push(styles.bold);\n    }\n\n    return (\n      <div className={styles.App}>\n        <h1>WELCOME</h1>\n        <p className={classes.join(' ')}>THIS IS AWESOME</p>\n        <button className={rButton} onClick={this.showContent}>Click Me</button>\n         \n          {persons}\n   \n      </div>\n      \n\n    );\n\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}