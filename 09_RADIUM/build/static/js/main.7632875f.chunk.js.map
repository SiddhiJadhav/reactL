{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["Radium","props","react_default","a","createElement","className","style","@media(min-width:500px)","width","onClick","click","name","age","children","onChange","changed","value","App","state","person","id","anotherState","showToggle","showContent","showT","_this","setState","deletePerson","indexPerson","persons","Object","toConsumableArray","splice","changeNameHandler","event","realId","findIndex","p","realPerson","objectSpread","target","changedPersons","console","log","_this2","this","backgroundColor","padding","border",":hover","map","index","Person_Person","key","bind","classes","length","push","style_root","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAoBeA,cAhBA,SAACC,GAMZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,MANrB,CACRC,0BAA0B,CACtBC,MAAM,WAKNN,EAAAC,EAAAC,cAAA,MAAIK,QAASR,EAAMS,OAAnB,iBAAyCT,EAAMU,MAC/CT,EAAAC,EAAAC,cAAA,yBAAcH,EAAMW,IAApB,KACAV,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,UACXX,EAAAC,EAAAC,cAAA,SAAOU,SAAUb,EAAMc,QAASC,MAAOf,EAAMU,kBCVnDM,6MAEJC,MAAM,CACJC,OAAO,CACL,CAACC,GAAG,IAAIT,KAAK,UAAUC,IAAI,IAC3B,CAACQ,GAAG,IAAIT,KAAK,OAAOC,IAAI,IACxB,CAACQ,GAAG,IAAIT,KAAK,MAAMC,IAAI,KAEzBS,aAAa,GAGbC,YAAW,KAGbC,YAAY,WACV,IAAIC,EAAQC,EAAKP,MAAMI,WACvBG,EAAKC,SAAS,CACZJ,YAAYE,OAIhBG,aAAe,SAACC,GACd,IAAMC,EAAOC,OAAAC,EAAA,EAAAD,CAAOL,EAAKP,MAAMC,QAC/BU,EAAQG,OAAOJ,EAAY,GAC3BH,EAAKC,SAAS,CAACP,OAAOU,OAGxBI,kBAAkB,SAACC,EAAMd,GAEvB,IAAMe,EAASV,EAAKP,MAAMC,OAAOiB,UAAU,SAAAC,GACzC,OAAOA,EAAEjB,KAAKA,IAGVkB,EAAUR,OAAAS,EAAA,EAAAT,CAAA,GAAOL,EAAKP,MAAMC,OAAOgB,IACzCG,EAAW3B,KAAOuB,EAAMM,OAAOxB,MAE/B,IAAMyB,EAAcX,OAAAC,EAAA,EAAAD,CAAOL,EAAKP,MAAMC,QACtCsB,EAAeN,GAAQG,EACvBI,QAAQC,IAAIF,GAEZhB,EAAKC,SAAS,CAACP,OAAOsB,6EAIf,IAAAG,EAAAC,KAEDvC,EAAQ,CACZwC,gBAAgB,QAChBC,QAAQ,MACRC,OAAO,MACPC,SAAS,CACPH,gBAAgB,eAGhBjB,EAAQ,KACTgB,KAAK3B,MAAMI,aACZO,EACE3B,EAAAC,EAAAC,cAAA,WAGEyC,KAAK3B,MAAMC,OAAO+B,IAAI,SAAC/B,EAAOgC,GAC5B,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,CACPC,IAAKlC,EAAOC,GACZT,KAAMQ,EAAOR,KACbC,IAAKO,EAAOP,IACZF,MAAOkC,EAAKjB,aAAa2B,KAAKV,EAAKO,GACnCpC,QAAS,SAACmB,GAAD,OAASU,EAAKX,kBAAkBC,EAAMf,EAAOC,UAK5Dd,EAAMwC,gBAAgB,MACtBxC,EAAM,UAAU,CACdwC,gBAAgB,YAIpB,IAAIS,EAAU,GASd,OARGV,KAAK3B,MAAMC,OAAOqC,QAAQ,GAC3BD,EAAQE,KAAK,OAGZZ,KAAK3B,MAAMC,OAAOqC,QAAQ,GAC3BD,EAAQE,KAAK,QAIbvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACAxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAWkD,EAAQI,KAAK,MAA3B,mBACAzD,EAAAC,EAAAC,cAAA,UAAQE,MAAOA,EAAOG,QAASoC,KAAKtB,aAApC,YAEGM,WA7FO+B,aAwGH5D,cAAOiB,GCjGF4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7632875f.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';\nimport Radium from 'radium';\n\nconst person = (props)=>{\n    const style={\n        '@media(min-width:500px)':{\n            width:'450px'\n        }\n    }\n    return(\n        <div className=\"PersonStyle\" style={style}>\n            <h2 onClick={props.click}>Hi My Name is {props.name}</h2>           \n            <h2>Age :--> {props.age} </h2>    \n            <h3>{props.children}</h3>\n            <input onChange={props.changed} value={props.name}/>\n        </div>\n    )\n}\n\nexport default Radium(person);","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\nimport Radium,{StyleRoot} from 'radium';\n\nclass App extends Component {\n\n  state={\n    person:[\n      {id:'1',name:\"Ruturaj\",age:26},\n      {id:'2',name:\"Rutu\",age:11},\n      {id:'3',name:\"raj\",age:22}\n    ],\n    anotherState:[\n\n    ],\n    showToggle:false\n\n  }\n  showContent=()=>{\n    let showT = this.state.showToggle;\n    this.setState({\n      showToggle:!showT\n    });\n\n  }\n  deletePerson = (indexPerson)=>{\n    const persons = [...this.state.person];\n    persons.splice(indexPerson,1);\n    this.setState({person:persons});\n  }\n\n  changeNameHandler=(event,id)=>{\n    // console.log(event.target.value);\n    const realId = this.state.person.findIndex(p=>{\n      return p.id===id\n    });\n    // console.log(realId);\n    const realPerson = {...this.state.person[realId]};\n    realPerson.name = event.target.value;\n\n    const changedPersons = [...this.state.person];\n    changedPersons[realId]=realPerson;\n    console.log(changedPersons);\n\n    this.setState({person:changedPersons});\n  }\n\n\n  render() {\n\n    const style = {\n      backgroundColor:'green',\n      padding:\"5px\",\n      border:\"0px\",\n      ':hover':{\n        backgroundColor:'lightgreen'\n      }\n    }\n    let persons=null;\n    if(this.state.showToggle){\n      persons = (\n        <div>\n\n        {\n          this.state.person.map((person,index)=>{\n            return <Person \n            key={person.id} \n            name={person.name} \n            age={person.age} \n            click={this.deletePerson.bind(this,index)}\n            changed={(event)=>this.changeNameHandler(event,person.id)}/>\n          })\n        }\n        </div>\n      );\n      style.backgroundColor=\"red\";\n      style[':hover']={\n        backgroundColor:'#ff6666'\n      }\n    }\n\n    let classes = [];\n    if(this.state.person.length<=2){\n      classes.push(\"red\");\n    }\n\n    if(this.state.person.length<=1){\n      classes.push(\"bold\");\n    }\n\n    return (\n      <StyleRoot>\n      <div className=\"App\">\n        <h1>WELCOME</h1>\n        <p className={classes.join(' ')}>THIS IS AWESOME</p>\n        <button style={style} onClick={this.showContent}>Click Me</button>\n         \n          {persons}\n   \n      </div>\n      \n      </StyleRoot>\n    );\n\n    \n  }\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}