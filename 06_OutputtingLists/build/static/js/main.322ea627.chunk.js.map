{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","age","children","App","state","id","anotherState","deletePerson","indexPerson","persons","Object","toConsumableArray","_this","splice","setState","_this2","this","map","index","Person_Person","key","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAceA,eAXA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAEXH,EAAAC,EAAAC,cAAA,MAAIE,QAASL,EAAMM,OAAnB,iBAAyCN,EAAMO,MAC/CN,EAAAC,EAAAC,cAAA,yBAAcH,EAAMQ,IAApB,KACAP,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,aCkCRC,6MArCbC,MAAM,CACJZ,OAAO,CACL,CAACa,GAAG,IAAIL,KAAK,UAAUC,IAAI,IAC3B,CAACI,GAAG,IAAIL,KAAK,OAAOC,IAAI,IACxB,CAACI,GAAG,IAAIL,KAAK,MAAMC,IAAI,KAEzBK,aAAa,MAMfC,aAAe,SAACC,GACd,IAAMC,EAAOC,OAAAC,EAAA,EAAAD,CAAOE,EAAKR,MAAMZ,QAC/BiB,EAAQI,OAAOL,EAAY,GAC3BI,EAAKE,SAAS,CAACtB,OAAOiB,6EAIf,IAAAM,EAAAC,KACP,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,qBAEEoB,KAAKZ,MAAMZ,OAAOyB,IAAI,SAACzB,EAAO0B,GAC5B,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,CACPC,IAAK5B,EAAOa,GACZL,KAAMR,EAAOQ,KACbC,IAAKT,EAAOS,IACZF,MAAOgB,EAAKR,aAAac,KAAKN,EAAKG,eA/B7BI,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.322ea627.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';  \n\nconst person = (props)=>{\n    return(\n        <div className=\"PersonStyle\">\n\n            <h2 onClick={props.click}>Hi My Name is {props.name}</h2>           \n            <h2>Age :--> {props.age} </h2>    \n            <h3>{props.children}</h3>\n        </div>\n    )\n}\n\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person'\n\nclass App extends Component {\n\n  state={\n    person:[\n      {id:'1',name:\"Ruturaj\",age:26},\n      {id:'2',name:\"Rutu\",age:11},\n      {id:'3',name:\"raj\",age:22}\n    ],\n    anotherState:[\n\n    ],\n\n  }\n\n  deletePerson = (indexPerson)=>{\n    const persons = [...this.state.person];\n    persons.splice(indexPerson,1);\n    this.setState({person:persons});\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>WELCOME</h1>\n        {\n          this.state.person.map((person,index)=>{\n            return <Person \n            key={person.id} \n            name={person.name} \n            age={person.age} \n            click={this.deletePerson.bind(this,index)}/>\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}