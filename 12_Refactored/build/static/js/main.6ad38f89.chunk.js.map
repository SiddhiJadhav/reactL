{"version":3,"sources":["components/Cockpit/Cockpit.module.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js","containers/App.module.css"],"names":["module","exports","red","bold","Cockpit","person","props","react_default","a","createElement","className","onClick","click","name","age","children","onChange","changed","value","persons","map","index","Person_Person","key","id","clicked","bind","event","cockpit","rButton","showToggle","styles","classes","length","push","join","show","App","state","showContent","showT","_this","setState","deletePerson","indexPerson","Object","toConsumableArray","splice","changeNameHandler","realId","findIndex","p","realPerson","objectSpread","target","changedPersons","this","Persons","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ad38f89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit_red__1ZNeZ\",\"bold\":\"Cockpit_bold__2O1vK\",\"Cockpit\":\"Cockpit_Cockpit__3CMI9\"};","import React from 'react';\nimport './Person.css';  \n\nconst person = (props)=>{\n    return(\n        <div className=\"PersonStyle\">\n\n            <h2 onClick={props.click}>Hi My Name is {props.name}</h2>           \n            <h2>Age :--> {props.age} </h2>    \n            <h3>{props.children}</h3>\n            <input onChange={props.changed} value={props.name}/>\n        </div>\n    )\n}\n\nexport default person;","import React from 'react'\nimport Person from './Person/Person';\n\nconst persons = (props) => (\n    \n        props.persons.map((person,index)=>{\n          return <Person \n          key={person.id} \n          name={person.name} \n          age={person.age} \n          click={props.clicked.bind(this,index)}\n          changed={(event)=>props.changed(event,person.id)}/>\n        })\n    \n);\n\nexport default persons;","import React from 'react';\n// import './Cockpit.module.css';\nimport styles from './Cockpit.module.css';\n\nconst cockpit = (props) => {\n    let rButton =''\n    if(props.showToggle){\n        rButton=styles.red;\n    }\n    let classes = [];\n    if(props.persons.length<=2){\n      classes.push(styles.red);\n    }\n\n    if(props.persons.length<=1){\n      classes.push(styles.bold);\n    }\n\n    \n    return (\n        <div className={styles.Cockpit}>\n            <h1>WELCOME</h1>\n            <p className={classes.join(' ')}>THIS IS AWESOME</p>\n            <button className={rButton} onClick={props.show}>Click Me</button>\n        </div>\n    );\n}\n\nexport default cockpit;","import React, { Component } from 'react';\n\nimport styles from './App.module.css';\nimport Persons from '../components/Persons/Persons'\nimport Cockpit from '../components/Cockpit/Cockpit'\n\nclass App extends Component {\n\n  state={\n    person:[\n      {id:'1',name:\"Ruturaj\",age:26},\n      {id:'2',name:\"Rutu\",age:11},\n      {id:'3',name:\"raj\",age:22}\n    ],\n    showToggle:false\n  }\n\n  showContent=()=>{\n    let showT = this.state.showToggle;\n    this.setState({\n      showToggle:!showT\n    });\n  }\n  \n  deletePerson = (indexPerson)=>{\n    const persons = [...this.state.person];\n    persons.splice(indexPerson,1);\n    this.setState({person:persons});\n  }\n\n  changeNameHandler=(event,id)=>{\n\n    const realId = this.state.person.findIndex(p=>{\n      return p.id===id\n    });\n    \n    const realPerson = {...this.state.person[realId]};\n    realPerson.name = event.target.value;\n    \n    const changedPersons = [...this.state.person];\n    changedPersons[realId]=realPerson;\n    \n    this.setState({person:changedPersons});\n  }\n\n\n  render() {\n    let persons=null;\n    \n    if(this.state.showToggle){\n      persons = (\n          <Persons\n            persons={this.state.person}\n            clicked={this.deletePerson}\n            changed={this.changeNameHandler}\n          />\n      );\n     }\n\n    return (\n      <div className={styles.App}>\n          <Cockpit\n            persons={this.state.person}\n            show={this.showContent}\n            showToggle={this.state.showToggle}\n          />\n          {persons}\n      </div>\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2_8zw\"};"],"sourceRoot":""}